import { useEffect, useState } from "react"
import style from "../styles/product.module.css"

let Game = () => {
	let [scenePos, setScenePos] = useState(0)
	let [ballPos, setBallPos] = useState(100)

	let [gameData, setGameData] = useState([
		{
			id: 3746,
			number: "01",
			title: "Ingest",
			para: "Upload your data sources to the DataNeuron Automated Learning Platform.",
			imageUrl: "img/game/signboard1.svg",
			show: false,
		},
		{
			id: 3446,
			number: "02",
			title: "Structure",
			para: "Structure the Masterlist based on the Taxonomy or Hierarchy of your dataset.",
			imageUrl: "img/game/signboard2.svg",
			show: false,
		},
		{
			id: 9868,
			number: "03",
			title: "Validate",
			para: "Validate auto-labelled paragraphs that have been generated by the DataNeuron ALP.",
			imageUrl: "img/game/signboard3.svg",
			show: false,
		},
		{
			id: 1146,
			number: "04",
			title: "Train",
			para: "DataNeuronâ€™s AutoML automates the model training and model creation process.",
			imageUrl: "img/game/signboard4.svg",
			show: false,
		},
		{
			id: 3427,
			number: "Optional",
			title: "Predict",
			para: "Perform predictions on the ingested dataset or in real time through the API without writing any code.",
			imageUrl: "img/game/signboard5.svg",
			show: false,
		},
		{
			id: 7135,
			number: "05",
			title: "Deploy",
			para: "Deploy your model by exporting the masterlist, labelled datasets or use the model block through APIs.",
			imageUrl: "img/game/signboard6.svg",
			show: false,
		},
		{
			id: 1033,
			number: "06",
			title: "Iterate",
			para: "Manage your Masterlist from the DataNeuron ALP which supports Incremental or Evolving Annotation. ",
			imageUrl: "img/game/signboard7.svg",
			show: false,
		},
	])

	let [windowWidth, setWindowWidth] = useState(0)

	let [interaction, setInteraction] = useState(false)

	useEffect(() => {
		console.log((ballPos + scenePos));
		for (let i = 0; i < 7; i++) {
			if ((ballPos + scenePos - 100) > (300 * i)) {
				gameData[i].show = true
				setGameData(gameData)
			} else {
				gameData[i].show = false
				setGameData(gameData)
			}
		}
	}, [ballPos, scenePos])

	useEffect(() => {
		setWindowWidth(window.innerWidth)
	}, [])

	// useEffect(() => {
	// 	let interval = null
	// 	if (interaction === false) {
	// 		interval = setInterval(() => {
	// 			if (ballPos < window.innerWidth / 2 - 100) {
	// 				setBallPos(ballPos + 2)
	// 			} else {
	// 				if (scenePos < 1900) {
	// 					setScenePos(scenePos + 1)
	// 				}
	// 			}
	// 		}, 10)
	// 	}
	// 	return () => {
	// 		if (interval !== null) {
	// 			clearInterval(interval)
	// 		}
	// 	}
	// }, [ballPos, scenePos])

	useEffect(() => {
		window.onkeydown = (e) => {
			if (e.key === "ArrowRight") {
				setInteraction(true)
				if (ballPos < window.innerWidth / 2) {
					setBallPos(ballPos + 30)
				} else {
					if (scenePos < 2400) {
						setScenePos(scenePos + 30)
					}
				}
			}
			if (e.key === "ArrowLeft") {
				setInteraction(true)
				if (scenePos < 0) {
					if (ballPos > 100) {
						setBallPos(ballPos - 30)
					}
				} else {
					setScenePos(scenePos - 30)
				}
			}
		}

		return () => {
			window.onkeydown = null
			clearInterval()
		}
	}, [scenePos, ballPos])

	useEffect(() => {
		if (window.DeviceOrientationEvent) {
			window.addEventListener(
				"deviceorientation",
				(e) => {
					console.log(e)
				},
				false
			)
		} else {
			console.log("device movement not supported")
		}
	}, [])

	return (
		<div
			className={`w-full h-80 overflow-y-hidden mt-6 p-6 ${style.hide_scroll}`}
			style={{ boxShadow: `0px 4px 4px rgba(0, 0, 0, 0.25)` }}
		>
			<svg
				style={{
					width: "94%",
					position: "absolute",
					transform: `translateY(218px)`,
				}}
			>
				<path
					stroke={"black"}
					strokeWidth={2}
					fill={"transparent"}
					d={`M 10 10 L ${windowWidth - 220} 10`}
				/>
			</svg>
			<div
				id={"ball"}
				className="absolute w-5 h-5 rounded-full border-2 border-blue-800 duration-200 "
				style={{
					transform: `translateX(${ballPos}px) translateY(208px)`,
				}}
			></div>
			<div
				className={"w-60 h-60 flex justify-center duration-200"}
				style={{ width: 2600, position: "relative", left: -scenePos }}
			>
				<div style={{ fontSize: 21, width: 500 }}>
					This Journey will take you through the{" "}
					<span style={{ color: "#0000FF" }}>DataNeuron</span>{" "}
					Pipeline.
				</div>
				{gameData.map((data) => {
					return (
						<div
							key={data.id}
							className={"flex"}
							style={{
								width: 400,
							}}
						>
							<div
								className={"p-3 flex flex-col justify-between"}
							>
								<div
									className={"duration-500"}
									style={{
										opacity: data.show ? 1 : 0,
										transform: `translateY(${
											data.show ? "0" : "-50px"
										})`,
									}}
								>
									<div
										className="text-gray-500"
										style={{ fontSize: 15 }}
									>
										{data.number}
									</div>
									<div
										className="font-bold"
										style={{ fontSize: 15 }}
									>
										{data.title}
									</div>
									<div style={{ fontSize: 17 }}>
										{data.para}
									</div>
								</div>
								<img
									className={"mt-3"}
									src={data.imageUrl}
									alt="sign board 1"
									width={50}
								/>
							</div>
						</div>
					)
				})}
			</div>

			<img
				title={"Play from start"}
				onClick={() => {
					setScenePos(0)
					setBallPos(100)
					setInteraction(false)
				}}
				src="/img/play.svg"
				className={"m-3"}
				alt="play btn"
				width={20}
				height={20}
			/>
		</div>
	)
}

export default Game
